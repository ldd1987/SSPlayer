//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer $Globals
{
    float4x4 worldMatrix;               // Offset:    0, size:   64
    float4x4 viewMatrix;                // Offset:   64, size:   64
    float4x4 projectionMatrix;          // Offset:  128, size:   64
    int     PixType;                    // Offset:  192, size:    4
    int     sourcewidth;                // Offset:  196, size:    4
    int     sourceheight;               // Offset:  200, size:    4
    float4  bt709yuv = { 0.0625, 0.5, 0.5, 0 };// Offset:  208, size:   16
    float4x4 bt709matrix = { 1.16400003, 1.16400003, 1.16400003, 0, 0, -0.213, 2.11199999, 0, 1.79299998, -0.532999992, 0, 0, 0, 0, 0, 0 };// Offset:  224, size:   64
}

//
// 5 local object(s)
//
Texture2D TextureSourceY;
Texture2D TextureSourceU;
Texture2D TextureSourceV;
Texture2D TextureSourceA;
SamplerState SamplerDiffuse
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    ComparisonFunc = uint(ALWAYS /* 8 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 BasicTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 worldMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 viewMatrix;               // Offset:   64 Size:    64
                //   float4x4 projectionMatrix;         // Offset:  128 Size:    64 [unused]
                //   int PixType;                       // Offset:  192 Size:     4 [unused]
                //   int sourcewidth;                   // Offset:  196 Size:     4 [unused]
                //   int sourceheight;                  // Offset:  200 Size:     4 [unused]
                //   float4 bt709yuv;                   // Offset:  208 Size:    16 [unused]
                //      = 0x3d800000 0x3f000000 0x3f000000 0x00000000 
                //   float4x4 bt709matrix;              // Offset:  224 Size:    64 [unused]
                //      = 0x3f94fdf4 0x3f94fdf4 0x3f94fdf4 0x00000000 
                //        0x00000000 0xbe5a1cac 0x40072b02 0x00000000 
                //        0x3fe58106 0xbf0872b0 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // $Globals                          cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- inPos.x; v0.y <- inPos.y; v0.z <- inPos.z; v0.w <- inPos.w; 
                //   v1.x <- inTexCoord.x; v1.y <- inTexCoord.y; 
                //   o1.x <- <VS return value>.TexCoord.x; o1.y <- <VS return value>.TexCoord.y; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 30 "C:\github\sinx\SSPlayer\SSPlayer\sharder\colorconvert.fx"
                mov r0.w, l(1.000000)  // r0.w <- inPos.w
                
                #line 34
                mov r0.xyz, v0.xyzx
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.Pos.w
                
                #line 38
                mov r0.xy, v1.xyxx  // r0.x <- output.TexCoord.x; r0.y <- output.TexCoord.y
                
                #line 39
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 10 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 worldMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 viewMatrix;               // Offset:   64 Size:    64 [unused]
                //   float4x4 projectionMatrix;         // Offset:  128 Size:    64 [unused]
                //   int PixType;                       // Offset:  192 Size:     4
                //   int sourcewidth;                   // Offset:  196 Size:     4 [unused]
                //   int sourceheight;                  // Offset:  200 Size:     4 [unused]
                //   float4 bt709yuv;                   // Offset:  208 Size:    16
                //      = 0x3d800000 0x3f000000 0x3f000000 0x00000000 
                //   float4x4 bt709matrix;              // Offset:  224 Size:    64
                //      = 0x3f94fdf4 0x3f94fdf4 0x3f94fdf4 0x00000000 
                //        0x00000000 0xbe5a1cac 0x40072b02 0x00000000 
                //        0x3fe58106 0xbf0872b0 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // SamplerDiffuse                    sampler      NA          NA             s0      1 
                // TextureSourceY                    texture  float4          2d             t0      1 
                // TextureSourceU                    texture  float4          2d             t1      1 
                // TextureSourceV                    texture  float4          2d             t2      1 
                // $Globals                          cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 147 "C:\github\sinx\SSPlayer\SSPlayer\sharder\colorconvert.fx"
                nop 
                
                #line 85
                ieq r0.x, cb0[12].x, l(6)
                if_nz r0.x
                
                #line 87
                  nop 
                
                #line 44
                  itof r0.xyz, l(0, 1, 0, 0)  // r0.x <- <PSPacked422_Reverse return value>.x; r0.y <- <PSPacked422_Reverse return value>.y; r0.z <- <PSPacked422_Reverse return value>.z
                  mov r0.w, l(1.000000)  // r0.w <- <PSPacked422_Reverse return value>.w
                
                #line 87
                  mov r0.xyzw, r0.xyzw  // r0.x <- rgba.x; r0.y <- rgba.y; r0.z <- rgba.z; r0.w <- rgba.w
                
                #line 88
                  mov r1.xyzw, -cb0[13].xyzw
                  add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- rgbasub.x; r0.y <- rgbasub.y; r0.z <- rgbasub.z; r0.w <- rgbasub.w
                
                #line 89
                  dp4 r1.x, r0.xyzw, cb0[14].xyzw  // r1.x <- rgbarsp.x
                  dp4 r1.y, r0.xyzw, cb0[15].xyzw  // r1.y <- rgbarsp.y
                  dp4 r1.z, r0.xyzw, cb0[16].xyzw  // r1.z <- rgbarsp.z
                
                #line 90
                  itof r1.w, l(1)  // r1.w <- rgbarsp.w
                
                #line 91
                  mov r1.xyz, r1.xyzx  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z
                  mov r1.w, r1.w  // r1.w <- <GetRGBA return value>.w
                
                #line 92
                else 
                
                #line 93
                  ieq r0.x, cb0[12].x, l(5)
                  if_nz r0.x
                
                #line 95
                    nop 
                
                #line 44
                    itof r0.xyz, l(0, 1, 0, 0)  // r0.x <- <PSPacked422_Reverse return value>.x; r0.y <- <PSPacked422_Reverse return value>.y; r0.z <- <PSPacked422_Reverse return value>.z
                    mov r0.w, l(1.000000)  // r0.w <- <PSPacked422_Reverse return value>.w
                
                #line 95
                    mov r0.xyzw, r0.xyzw  // r0.x <- rgba.x; r0.y <- rgba.y; r0.z <- rgba.z; r0.w <- rgba.w
                
                #line 96
                    mov r2.xyzw, -cb0[13].xyzw
                    add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- rgbasub.x; r0.y <- rgbasub.y; r0.z <- rgbasub.z; r0.w <- rgbasub.w
                
                #line 97
                    dp4 r1.x, r0.xyzw, cb0[14].xyzw  // r1.x <- rgbarsp.x
                    dp4 r1.y, r0.xyzw, cb0[15].xyzw  // r1.y <- rgbarsp.y
                    dp4 r1.z, r0.xyzw, cb0[16].xyzw  // r1.z <- rgbarsp.z
                
                #line 98
                    itof r1.w, l(1)  // r1.w <- rgbarsp.w
                
                #line 99
                    mov r1.xyz, r1.xyzx  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z
                    mov r1.w, r1.w  // r1.w <- <GetRGBA return value>.w
                
                #line 100
                  else 
                
                #line 101
                    ieq r0.x, cb0[12].x, l(3)
                    if_nz r0.x
                
                #line 103
                      nop 
                
                #line 44
                      itof r0.xyz, l(0, 1, 0, 0)  // r0.x <- <PSPacked422_Reverse return value>.x; r0.y <- <PSPacked422_Reverse return value>.y; r0.z <- <PSPacked422_Reverse return value>.z
                      mov r0.w, l(1.000000)  // r0.w <- <PSPacked422_Reverse return value>.w
                
                #line 103
                      mov r0.xyzw, r0.xyzw  // r0.x <- rgba.x; r0.y <- rgba.y; r0.z <- rgba.z; r0.w <- rgba.w
                
                #line 104
                      mov r2.xyzw, -cb0[13].xyzw
                      add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- rgbasub.x; r0.y <- rgbasub.y; r0.z <- rgbasub.z; r0.w <- rgbasub.w
                
                #line 105
                      dp4 r1.x, r0.xyzw, cb0[14].xyzw  // r1.x <- rgbarsp.x
                      dp4 r1.y, r0.xyzw, cb0[15].xyzw  // r1.y <- rgbarsp.y
                      dp4 r1.z, r0.xyzw, cb0[16].xyzw  // r1.z <- rgbarsp.z
                
                #line 106
                      itof r1.w, l(1)  // r1.w <- rgbarsp.w
                
                #line 107
                      mov r1.xyz, r1.xyzx  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z
                      mov r1.w, r1.w  // r1.w <- <GetRGBA return value>.w
                
                #line 108
                    else 
                
                #line 109
                      ieq r0.x, cb0[12].x, l(2)
                      if_nz r0.x
                
                #line 111
                        nop 
                
                #line 49
                        sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0  // r0.x <- y
                
                #line 51
                        sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t1.yxzw, s0  // r0.y <- u
                
                #line 52
                        sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0  // r0.z <- v
                
                #line 54
                        mov r0.w, l(1.000000)
                        mov r0.xyzw, r0.xyzw  // r0.x <- <PSPlanar420_Reverse return value>.x; r0.y <- <PSPlanar420_Reverse return value>.y; r0.z <- <PSPlanar420_Reverse return value>.z; r0.w <- <PSPlanar420_Reverse return value>.w
                
                #line 111
                        mov r0.xyzw, r0.xyzw  // r0.x <- rgba.x; r0.y <- rgba.y; r0.z <- rgba.z; r0.w <- rgba.w
                
                #line 112
                        mov r2.xyzw, -cb0[13].xyzw
                        add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- rgbasub.x; r0.y <- rgbasub.y; r0.z <- rgbasub.z; r0.w <- rgbasub.w
                
                #line 113
                        dp4 r1.x, r0.xyzw, cb0[14].xyzw  // r1.x <- rgbarsp.x
                        dp4 r1.y, r0.xyzw, cb0[15].xyzw  // r1.y <- rgbarsp.y
                        dp4 r1.z, r0.xyzw, cb0[16].xyzw  // r1.z <- rgbarsp.z
                
                #line 114
                        itof r1.w, l(1)  // r1.w <- rgbarsp.w
                
                #line 115
                        mov r1.xyz, r1.xyzx  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z
                        mov r1.w, r1.w  // r1.w <- <GetRGBA return value>.w
                
                #line 116
                      else 
                
                #line 117
                        ieq r0.x, cb0[12].x, l(1)
                        if_nz r0.x
                
                #line 119
                          sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 120
                          mov r1.xyzw, r1.xyzw  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z; r1.w <- <GetRGBA return value>.w
                
                #line 121
                        else 
                
                #line 122
                          ieq r0.x, cb0[12].x, l(4)
                          if_nz r0.x
                
                #line 124
                            nop 
                
                #line 70
                            itof r1.xyz, l(0, 1, 0, 0)  // r1.x <- <PSPlanarRGB_Reverse return value>.x; r1.y <- <PSPlanarRGB_Reverse return value>.y; r1.z <- <PSPlanarRGB_Reverse return value>.z
                            mov r1.w, l(1.000000)  // r1.w <- <PSPlanarRGB_Reverse return value>.w
                
                #line 124
                            mov r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 125
                            mov r1.xyzw, r1.xyzw  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z; r1.w <- <GetRGBA return value>.w
                
                #line 126
                          else 
                
                #line 127
                            ieq r0.x, cb0[12].x, l(7)
                            if_nz r0.x
                
                #line 129
                              sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 130
                              mov r1.xyzw, r1.xyzw  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z; r1.w <- <GetRGBA return value>.w
                
                #line 131
                            else 
                
                #line 132
                              ieq r0.x, cb0[12].x, l(8)
                              if_nz r0.x
                
                #line 134
                                nop 
                
                #line 60
                                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
                                itof r0.y, l(64)
                                mul r0.x, r0.y, r0.x  // r0.x <- y
                
                #line 62
                                sample_indexable(texture2d)(float,float,float,float) r2.x, v1.xyxx, t1.xyzw, s0
                                itof r2.y, l(64)
                                mul r0.y, r2.y, r2.x  // r0.y <- u
                
                #line 63
                                sample_indexable(texture2d)(float,float,float,float) r2.x, v1.xyxx, t2.xyzw, s0
                                itof r2.y, l(64)
                                mul r0.z, r2.y, r2.x  // r0.z <- v
                
                #line 65
                                mov r0.w, l(1.000000)
                                mov r0.xyzw, r0.xyzw  // r0.x <- <PSPlanar42010_Reverse return value>.x; r0.y <- <PSPlanar42010_Reverse return value>.y; r0.z <- <PSPlanar42010_Reverse return value>.z; r0.w <- <PSPlanar42010_Reverse return value>.w
                
                #line 134
                                mov r0.xyzw, r0.xyzw  // r0.x <- rgba.x; r0.y <- rgba.y; r0.z <- rgba.z; r0.w <- rgba.w
                
                #line 135
                                mov r2.xyzw, -cb0[13].xyzw
                                add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- rgbasub.x; r0.y <- rgbasub.y; r0.z <- rgbasub.z; r0.w <- rgbasub.w
                
                #line 136
                                dp4 r1.x, r0.xyzw, cb0[14].xyzw  // r1.x <- rgbarsp.x
                                dp4 r1.y, r0.xyzw, cb0[15].xyzw  // r1.y <- rgbarsp.y
                                dp4 r1.z, r0.xyzw, cb0[16].xyzw  // r1.z <- rgbarsp.z
                
                #line 137
                                itof r1.w, l(1)  // r1.w <- rgbarsp.w
                
                #line 138
                                mov r1.xyz, r1.xyzx  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z
                                mov r1.w, r1.w  // r1.w <- <GetRGBA return value>.w
                
                #line 139
                              else 
                
                #line 142
                                itof r1.xyzw, l(0, 1, 0, 1)  // r1.x <- <GetRGBA return value>.x; r1.y <- <GetRGBA return value>.y; r1.z <- <GetRGBA return value>.z; r1.w <- <GetRGBA return value>.w
                
                #line 143
                              endif 
                            endif 
                          endif 
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                
                #line 147
                mov r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 148
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 118 instruction slots used
                            
            };
        }

    }

}

