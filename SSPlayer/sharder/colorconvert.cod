//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer $Globals
{
    float4x4 worldMatrix;               // Offset:    0, size:   64
    float4x4 viewMatrix;                // Offset:   64, size:   64
    float4x4 projectionMatrix;          // Offset:  128, size:   64
    int     PixType;                    // Offset:  192, size:    4
    int     BlendType = 0;              // Offset:  196, size:    4
    int     sourcewidth;                // Offset:  200, size:    4
    int     sourceheight;               // Offset:  204, size:    4
    float4  bt709yuv = { 0.0625, 0.5, 0.5, 0 };// Offset:  208, size:   16
    float4x4 bt709matrix = { 1.16400003, 1.16400003, 1.16400003, 0, 0, -0.213, 2.11199999, 0, 1.79299998, -0.532999992, 0, 0, 0, 0, 0, 0 };// Offset:  224, size:   64
}

//
// 3 local object(s)
//
Texture2D TextureSource;
Texture2D TextureCG;
SamplerState SamplerDiffuse
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    ComparisonFunc = uint(ALWAYS /* 8 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 BasicTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 worldMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 viewMatrix;               // Offset:   64 Size:    64
                //   float4x4 projectionMatrix;         // Offset:  128 Size:    64 [unused]
                //   int PixType;                       // Offset:  192 Size:     4 [unused]
                //   int BlendType;                     // Offset:  196 Size:     4 [unused]
                //      = 0x00000000 
                //   int sourcewidth;                   // Offset:  200 Size:     4 [unused]
                //   int sourceheight;                  // Offset:  204 Size:     4 [unused]
                //   float4 bt709yuv;                   // Offset:  208 Size:    16 [unused]
                //      = 0x3d800000 0x3f000000 0x3f000000 0x00000000 
                //   float4x4 bt709matrix;              // Offset:  224 Size:    64 [unused]
                //      = 0x3f94fdf4 0x3f94fdf4 0x3f94fdf4 0x00000000 
                //        0x00000000 0xbe5a1cac 0x40072b02 0x00000000 
                //        0x3fe58106 0xbf0872b0 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // $Globals                          cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- inPos.x; v0.y <- inPos.y; v0.z <- inPos.z; v0.w <- inPos.w; 
                //   v1.x <- inTexCoord.x; v1.y <- inTexCoord.y; 
                //   o1.x <- <VS return value>.TexCoord.x; o1.y <- <VS return value>.TexCoord.y; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 29 "C:\github\SSPlayer\SSPlayer\sharder\colorconvert.fx"
                mov r0.w, l(1.000000)  // r0.w <- inPos.w
                
                #line 33
                mov r0.xyz, v0.xyzx
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.Pos.w
                
                #line 37
                mov r0.xy, v1.xyxx  // r0.x <- output.TexCoord.x; r0.y <- output.TexCoord.y
                
                #line 38
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 10 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 worldMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 viewMatrix;               // Offset:   64 Size:    64 [unused]
                //   float4x4 projectionMatrix;         // Offset:  128 Size:    64 [unused]
                //   int PixType;                       // Offset:  192 Size:     4
                //   int BlendType;                     // Offset:  196 Size:     4 [unused]
                //      = 0x00000000 
                //   int sourcewidth;                   // Offset:  200 Size:     4
                //   int sourceheight;                  // Offset:  204 Size:     4
                //   float4 bt709yuv;                   // Offset:  208 Size:    16
                //      = 0x3d800000 0x3f000000 0x3f000000 0x00000000 
                //   float4x4 bt709matrix;              // Offset:  224 Size:    64
                //      = 0x3f94fdf4 0x3f94fdf4 0x3f94fdf4 0x00000000 
                //        0x00000000 0xbe5a1cac 0x40072b02 0x00000000 
                //        0x3fe58106 0xbf0872b0 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // SamplerDiffuse                    sampler      NA          NA             s0      1 
                // TextureSource                     texture  float4          2d             t0      1 
                // $Globals                          cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 157 "C:\github\SSPlayer\SSPlayer\sharder\colorconvert.fx"
                nop 
                mov r0.xy, v1.xyxx
                
                #line 103
                ieq r0.z, cb0[12].x, l(6)
                if_nz r0.z
                
                #line 105
                  nop 
                  mov r0.x, r0.x
                
                #line 51
                  itof r0.z, cb0[12].z
                  mul r0.z, r0.x, r0.z
                  add r0.z, r0.z, l(0.200000)
                  div r0.z, r0.z, l(2.000000)
                  mov r0.w, -r0.z
                  max r1.x, r0.w, r0.z
                  ge r0.z, r0.z, r0.w
                  frc r0.w, r1.x
                  mov r1.x, -r0.w
                  movc r0.z, r0.z, r0.w, r1.x
                  mul r0.z, r0.z, l(2.000000)
                  round_ni r0.z, r0.z  // r0.z <- odd
                
                #line 52
                  ineg r0.w, cb0[12].z
                  ineg r1.x, l(2)
                  xor r1.y, cb0[12].z, l(2)
                  imax r0.w, r0.w, cb0[12].z
                  imax r1.x, r1.x, l(2)
                  udiv r0.w, null, r0.w, r1.x
                  ineg r1.x, r0.w
                  and r1.y, r1.y, l(0x80000000)
                  ine r1.y, l(0, 0, 0, 0), r1.y
                  movc r0.w, r1.y, r1.x, r0.w
                  itof r0.w, r0.w
                  mul r0.w, r0.x, r0.w
                  add r0.w, r0.w, l(0.200000)
                  round_ni r0.w, r0.w
                  ineg r1.x, cb0[12].z
                  ineg r1.y, l(2)
                  xor r1.z, cb0[12].z, l(2)
                  imax r1.x, r1.x, cb0[12].z
                  imax r1.y, r1.y, l(2)
                  udiv r1.x, null, r1.x, r1.y
                  ineg r1.y, r1.x
                  and r1.z, r1.z, l(0x80000000)
                  ine r1.z, l(0, 0, 0, 0), r1.z
                  movc r1.x, r1.z, r1.y, r1.x
                  itof r1.x, r1.x
                  div r1.x, l(1.000000), r1.x
                  mul r0.w, r0.w, r1.x  // r0.w <- x
                
                #line 53
                  itof r1.x, cb0[12].z
                  div r1.x, l(1.000000), r1.x
                  itof r1.y, l(2)
                  div r1.x, r1.x, r1.y
                  add r1.x, r0.w, r1.x  // r1.x <- x
                
                #line 54
                  mov r1.y, v1.y
                  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xwyz, s0  // r1.x <- texel.x; r1.z <- texel.y; r1.w <- texel.z; r1.y <- texel.w
                
                #line 55
                  lt r0.z, l(0.500000), r0.z
                  movc r1.x, r0.z, r1.x, r1.w  // r1.x <- <PSPacked422_Reverse return value>.x
                  mov r1.yz, r1.yyzy  // r1.y <- <PSPacked422_Reverse return value>.y; r1.z <- <PSPacked422_Reverse return value>.z
                  mov r1.w, l(1.000000)  // r1.w <- <PSPacked422_Reverse return value>.w
                
                #line 105
                  mov r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 106
                  mov r2.xyzw, -cb0[13].xyzw
                  add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- rgbasub.x; r1.y <- rgbasub.y; r1.z <- rgbasub.z; r1.w <- rgbasub.w
                
                #line 107
                  dp4 r2.x, r1.xyzw, cb0[14].xyzw  // r2.x <- rgbarsp.x
                  dp4 r2.y, r1.xyzw, cb0[15].xyzw  // r2.y <- rgbarsp.y
                  dp4 r2.z, r1.xyzw, cb0[16].xyzw  // r2.z <- rgbarsp.z
                
                #line 108
                  itof r2.w, l(1)  // r2.w <- rgbarsp.w
                
                #line 109
                  mov r2.xyz, r2.xyzx  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z
                  mov r2.w, r2.w  // r2.w <- <GetRGBA return value>.w
                
                #line 110
                else 
                
                #line 111
                  ieq r0.z, cb0[12].x, l(5)
                  if_nz r0.z
                
                #line 113
                    nop 
                    mov r0.x, r0.x
                
                #line 51
                    itof r0.z, cb0[12].z
                    mul r0.z, r0.x, r0.z
                    add r0.z, r0.z, l(0.200000)
                    div r0.z, r0.z, l(2.000000)
                    mov r0.w, -r0.z
                    max r1.x, r0.w, r0.z
                    ge r0.z, r0.z, r0.w
                    frc r0.w, r1.x
                    mov r1.x, -r0.w
                    movc r0.z, r0.z, r0.w, r1.x
                    mul r0.z, r0.z, l(2.000000)
                    round_ni r0.z, r0.z  // r0.z <- odd
                
                #line 52
                    ineg r0.w, cb0[12].z
                    ineg r1.x, l(2)
                    xor r1.y, cb0[12].z, l(2)
                    imax r0.w, r0.w, cb0[12].z
                    imax r1.x, r1.x, l(2)
                    udiv r0.w, null, r0.w, r1.x
                    ineg r1.x, r0.w
                    and r1.y, r1.y, l(0x80000000)
                    ine r1.y, l(0, 0, 0, 0), r1.y
                    movc r0.w, r1.y, r1.x, r0.w
                    itof r0.w, r0.w
                    mul r0.w, r0.x, r0.w
                    add r0.w, r0.w, l(0.200000)
                    round_ni r0.w, r0.w
                    ineg r1.x, cb0[12].z
                    ineg r1.y, l(2)
                    xor r1.z, cb0[12].z, l(2)
                    imax r1.x, r1.x, cb0[12].z
                    imax r1.y, r1.y, l(2)
                    udiv r1.x, null, r1.x, r1.y
                    ineg r1.y, r1.x
                    and r1.z, r1.z, l(0x80000000)
                    ine r1.z, l(0, 0, 0, 0), r1.z
                    movc r1.x, r1.z, r1.y, r1.x
                    itof r1.x, r1.x
                    div r1.x, l(1.000000), r1.x
                    mul r0.w, r0.w, r1.x  // r0.w <- x
                
                #line 53
                    itof r1.x, cb0[12].z
                    div r1.x, l(1.000000), r1.x
                    itof r1.y, l(2)
                    div r1.x, r1.x, r1.y
                    add r1.x, r0.w, r1.x  // r1.x <- x
                
                #line 54
                    mov r1.y, v1.y
                    sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.yzxw, s0  // r1.z <- texel.x; r1.x <- texel.y; r1.y <- texel.z; r1.w <- texel.w
                
                #line 55
                    lt r0.z, l(0.500000), r0.z
                    movc r1.x, r0.z, r1.w, r1.x  // r1.x <- <PSPacked422_Reverse return value>.x
                    mov r1.yz, r1.yyzy  // r1.y <- <PSPacked422_Reverse return value>.y; r1.z <- <PSPacked422_Reverse return value>.z
                    mov r1.w, l(1.000000)  // r1.w <- <PSPacked422_Reverse return value>.w
                
                #line 113
                    mov r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 114
                    mov r3.xyzw, -cb0[13].xyzw
                    add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- rgbasub.x; r1.y <- rgbasub.y; r1.z <- rgbasub.z; r1.w <- rgbasub.w
                
                #line 115
                    dp4 r2.x, r1.xyzw, cb0[14].xyzw  // r2.x <- rgbarsp.x
                    dp4 r2.y, r1.xyzw, cb0[15].xyzw  // r2.y <- rgbarsp.y
                    dp4 r2.z, r1.xyzw, cb0[16].xyzw  // r2.z <- rgbarsp.z
                
                #line 116
                    itof r2.w, l(1)  // r2.w <- rgbarsp.w
                
                #line 117
                    mov r2.xyz, r2.xyzx  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z
                    mov r2.w, r2.w  // r2.w <- <GetRGBA return value>.w
                
                #line 118
                  else 
                
                #line 119
                    ieq r0.z, cb0[12].x, l(3)
                    if_nz r0.z
                
                #line 121
                      nop 
                      mov r0.x, r0.x
                
                #line 51
                      itof r0.z, cb0[12].z
                      mul r0.z, r0.x, r0.z
                      add r0.z, r0.z, l(0.200000)
                      div r0.z, r0.z, l(2.000000)
                      mov r0.w, -r0.z
                      max r1.x, r0.w, r0.z
                      ge r0.z, r0.z, r0.w
                      frc r0.w, r1.x
                      mov r1.x, -r0.w
                      movc r0.z, r0.z, r0.w, r1.x
                      mul r0.z, r0.z, l(2.000000)
                      round_ni r0.z, r0.z  // r0.z <- odd
                
                #line 52
                      ineg r0.w, cb0[12].z
                      ineg r1.x, l(2)
                      xor r1.y, cb0[12].z, l(2)
                      imax r0.w, r0.w, cb0[12].z
                      imax r1.x, r1.x, l(2)
                      udiv r0.w, null, r0.w, r1.x
                      ineg r1.x, r0.w
                      and r1.y, r1.y, l(0x80000000)
                      ine r1.y, l(0, 0, 0, 0), r1.y
                      movc r0.w, r1.y, r1.x, r0.w
                      itof r0.w, r0.w
                      mul r0.w, r0.x, r0.w
                      add r0.w, r0.w, l(0.200000)
                      round_ni r0.w, r0.w
                      ineg r1.x, cb0[12].z
                      ineg r1.y, l(2)
                      xor r1.z, cb0[12].z, l(2)
                      imax r1.x, r1.x, cb0[12].z
                      imax r1.y, r1.y, l(2)
                      udiv r1.x, null, r1.x, r1.y
                      ineg r1.y, r1.x
                      and r1.z, r1.z, l(0x80000000)
                      ine r1.z, l(0, 0, 0, 0), r1.z
                      movc r1.x, r1.z, r1.y, r1.x
                      itof r1.x, r1.x
                      div r1.x, l(1.000000), r1.x
                      mul r0.w, r0.w, r1.x  // r0.w <- x
                
                #line 53
                      itof r1.x, cb0[12].z
                      div r1.x, l(1.000000), r1.x
                      itof r1.y, l(2)
                      div r1.x, r1.x, r1.y
                      add r1.x, r0.w, r1.x  // r1.x <- x
                
                #line 54
                      mov r1.y, v1.y
                      sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xywz, s0  // r1.x <- texel.x; r1.y <- texel.y; r1.w <- texel.z; r1.z <- texel.w
                
                #line 55
                      lt r0.z, l(0.500000), r0.z
                      movc r1.x, r0.z, r1.x, r1.w  // r1.x <- <PSPacked422_Reverse return value>.x
                      mov r1.yz, r1.yyzy  // r1.y <- <PSPacked422_Reverse return value>.y; r1.z <- <PSPacked422_Reverse return value>.z
                      mov r1.w, l(1.000000)  // r1.w <- <PSPacked422_Reverse return value>.w
                
                #line 121
                      mov r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 122
                      mov r3.xyzw, -cb0[13].xyzw
                      add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- rgbasub.x; r1.y <- rgbasub.y; r1.z <- rgbasub.z; r1.w <- rgbasub.w
                
                #line 123
                      dp4 r2.x, r1.xyzw, cb0[14].xyzw  // r2.x <- rgbarsp.x
                      dp4 r2.y, r1.xyzw, cb0[15].xyzw  // r2.y <- rgbarsp.y
                      dp4 r2.z, r1.xyzw, cb0[16].xyzw  // r2.z <- rgbarsp.z
                
                #line 124
                      itof r2.w, l(1)  // r2.w <- rgbarsp.w
                
                #line 125
                      mov r2.xyz, r2.xyzx  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z
                      mov r2.w, r2.w  // r2.w <- <GetRGBA return value>.w
                
                #line 126
                    else 
                
                #line 127
                      ieq r0.z, cb0[12].x, l(2)
                      if_nz r0.z
                
                #line 129
                        nop 
                        mov r0.xy, r0.xyxx
                
                #line 60
                        itof r0.z, cb0[12].z
                        mul r0.z, r0.z, r0.x
                        ftou r0.z, r0.z  // r0.z <- x
                
                #line 61
                        itof r0.w, cb0[12].w
                        mul r0.w, r0.w, r0.y
                        ftou r0.w, r0.w  // r0.w <- y
                
                #line 63
                        mov r1.x, cb0[12].z
                        imul null, r1.x, r0.w, r1.x
                        iadd r1.x, r0.z, r1.x  // r1.x <- lum_offset
                
                #line 64
                        mov r1.y, l(2)
                        udiv r0.w, null, r0.w, r1.y
                        ineg r1.y, cb0[12].z
                        ineg r1.z, l(2)
                        xor r1.w, cb0[12].z, l(2)
                        imax r1.y, r1.y, cb0[12].z
                        imax r1.z, r1.z, l(2)
                        udiv r1.y, null, r1.y, r1.z
                        ineg r1.z, r1.y
                        and r1.w, r1.w, l(0x80000000)
                        ine r1.w, l(0, 0, 0, 0), r1.w
                        movc r1.y, r1.w, r1.z, r1.y
                        imul null, r0.w, r0.w, r1.y
                        mov r1.y, l(2)
                        udiv r0.z, null, r0.z, r1.y
                        iadd r0.z, r0.z, r0.w  // r0.z <- chroma_offset
                
                #line 65
                        imul null, r0.w, cb0[12].w, cb0[12].z
                        iadd r0.z, r0.z, r0.w  // r0.z <- chroma1
                
                #line 66
                        imul null, r0.w, cb0[12].w, cb0[12].z
                        itof r0.w, r0.w
                        mul r0.w, r0.w, l(0.250000)
                        utof r1.y, r0.z
                        add r0.w, r0.w, r1.y
                        ftou r0.w, r0.w  // r0.w <- chroma2
                
                #line 68
                        nop 
                        mov r1.x, r1.x
                
                #line 43
                        mov r1.y, cb0[12].z
                        udiv null, r3.x, r1.x, r1.y
                        mov r1.y, cb0[12].z
                        udiv r3.y, null, r1.x, r1.y
                        mov r3.zw, l(0,0,0,0)
                        ld_indexable(texture2d)(float,float,float,float) r1.x, r3.xyzw, t0.xyzw  // r1.x <- <GetIntOffsetColor return value>
                
                #line 68
                        nop 
                        mov r0.z, r0.z
                
                #line 43
                        mov r3.x, cb0[12].z
                        udiv null, r3.x, r0.z, r3.x
                        mov r4.x, cb0[12].z
                        udiv r3.y, null, r0.z, r4.x
                        mov r3.zw, l(0,0,0,0)
                        ld_indexable(texture2d)(float,float,float,float) r1.y, r3.xyzw, t0.yxzw  // r1.y <- <GetIntOffsetColor return value>
                
                #line 68
                        nop 
                        mov r0.w, r0.w
                
                #line 43
                        mov r0.z, cb0[12].z
                        udiv null, r3.x, r0.w, r0.z
                        mov r0.z, cb0[12].z
                        udiv r3.y, null, r0.w, r0.z
                        mov r3.zw, l(0,0,0,0)
                        ld_indexable(texture2d)(float,float,float,float) r1.z, r3.xyzw, t0.yzxw  // r1.z <- <GetIntOffsetColor return value>
                
                #line 68
                        mov r1.w, l(1.000000)
                        mov r1.xyzw, r1.xyzw  // r1.x <- <PSPlanar420_Reverse return value>.x; r1.y <- <PSPlanar420_Reverse return value>.y; r1.z <- <PSPlanar420_Reverse return value>.z; r1.w <- <PSPlanar420_Reverse return value>.w
                
                #line 129
                        mov r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w
                
                #line 130
                        mov r3.xyzw, -cb0[13].xyzw
                        add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- rgbasub.x; r1.y <- rgbasub.y; r1.z <- rgbasub.z; r1.w <- rgbasub.w
                
                #line 131
                        dp4 r2.x, r1.xyzw, cb0[14].xyzw  // r2.x <- rgbarsp.x
                        dp4 r2.y, r1.xyzw, cb0[15].xyzw  // r2.y <- rgbarsp.y
                        dp4 r2.z, r1.xyzw, cb0[16].xyzw  // r2.z <- rgbarsp.z
                
                #line 132
                        itof r2.w, l(1)  // r2.w <- rgbarsp.w
                
                #line 133
                        mov r2.xyz, r2.xyzx  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z
                        mov r2.w, r2.w  // r2.w <- <GetRGBA return value>.w
                
                #line 134
                      else 
                
                #line 135
                        ieq r0.z, cb0[12].x, l(1)
                        if_nz r0.z
                
                #line 137
                          sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0  // r2.x <- rgba.x; r2.y <- rgba.y; r2.z <- rgba.z; r2.w <- rgba.w
                
                #line 138
                          mov r2.xyzw, r2.xyzw  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z; r2.w <- <GetRGBA return value>.w
                
                #line 139
                        else 
                
                #line 140
                          ieq r0.z, cb0[12].x, l(4)
                          if_nz r0.z
                
                #line 142
                            nop 
                            mov r0.xy, r0.xyxx
                
                #line 78
                            itof r0.z, cb0[12].z
                            mul r0.x, r0.z, r0.x
                            ftou r0.x, r0.x  // r0.x <- x
                
                #line 79
                            itof r0.z, cb0[12].w
                            mul r0.y, r0.z, r0.y
                            ftou r0.y, r0.y  // r0.y <- y
                
                #line 81
                            mov r0.z, cb0[12].z
                            imul null, r0.y, r0.z, r0.y
                            iadd r0.x, r0.x, r0.y
                            mov r0.y, l(3)
                            imul null, r0.x, r0.y, r0.x  // r0.x <- lum_offset
                
                #line 82
                            mov r0.y, l(1)
                            iadd r0.y, r0.y, r0.x  // r0.y <- chroma1
                
                #line 83
                            mov r0.z, l(2)
                            iadd r0.z, r0.z, r0.x  // r0.z <- chroma2
                
                #line 84
                            imul null, r0.w, cb0[12].z, l(3)  // r0.w <- nWidth
                
                #line 85
                            udiv null, r1.x, r0.x, r0.w
                            udiv r1.y, null, r0.x, r0.w
                            mov r1.zw, l(0,0,0,0)
                            ld_indexable(texture2d)(float,float,float,float) r2.x, r1.xyzw, t0.xyzw  // r2.x <- r
                
                #line 86
                            udiv null, r1.x, r0.y, r0.w
                            udiv r1.y, null, r0.y, r0.w
                            mov r1.zw, l(0,0,0,0)
                            ld_indexable(texture2d)(float,float,float,float) r2.y, r1.xyzw, t0.yxzw  // r2.y <- g
                
                #line 87
                            udiv null, r1.x, r0.z, r0.w
                            udiv r1.y, null, r0.z, r0.w
                            mov r1.zw, l(0,0,0,0)
                            ld_indexable(texture2d)(float,float,float,float) r2.z, r1.xyzw, t0.yzxw  // r2.z <- b
                
                #line 88
                            mov r2.w, l(1.000000)
                            mov r2.xyzw, r2.xyzw  // r2.x <- <PSPlanarRGB_Reverse return value>.x; r2.y <- <PSPlanarRGB_Reverse return value>.y; r2.z <- <PSPlanarRGB_Reverse return value>.z; r2.w <- <PSPlanarRGB_Reverse return value>.w
                
                #line 142
                            mov r2.xyzw, r2.xyzw  // r2.x <- rgba.x; r2.y <- rgba.y; r2.z <- rgba.z; r2.w <- rgba.w
                
                #line 143
                            mov r2.xyzw, r2.xyzw  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z; r2.w <- <GetRGBA return value>.w
                
                #line 144
                          else   // Prior locations: r0.x <- input.TexCoord.x; r0.y <- input.TexCoord.y
                
                #line 145
                            ieq r0.x, cb0[12].x, l(7)
                            if_nz r0.x
                
                #line 147
                              sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0  // r2.x <- rgba.x; r2.y <- rgba.y; r2.z <- rgba.z; r2.w <- rgba.w
                
                #line 148
                              mov r2.xyzw, r2.xyzw  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z; r2.w <- <GetRGBA return value>.w
                
                #line 149
                            else 
                
                #line 152
                              itof r2.xyzw, l(0, 1, 0, 1)  // r2.x <- <GetRGBA return value>.x; r2.y <- <GetRGBA return value>.y; r2.z <- <GetRGBA return value>.z; r2.w <- <GetRGBA return value>.w
                
                #line 153
                            endif 
                          endif 
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                
                #line 157
                mov r2.xyzw, r2.xyzw  // r2.x <- rgba.x; r2.y <- rgba.y; r2.z <- rgba.z; r2.w <- rgba.w
                
                #line 158
                mov o0.xyzw, r2.xyzw
                ret 
                // Approximately 325 instruction slots used
                            
            };
        }

    }

}

